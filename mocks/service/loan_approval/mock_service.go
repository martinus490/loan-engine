// Code generated by MockGen. DO NOT EDIT.
// Source: service/loan_approval/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "loan_engine/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoanApprovalService is a mock of LoanApprovalService interface.
type MockLoanApprovalService struct {
	ctrl     *gomock.Controller
	recorder *MockLoanApprovalServiceMockRecorder
}

// MockLoanApprovalServiceMockRecorder is the mock recorder for MockLoanApprovalService.
type MockLoanApprovalServiceMockRecorder struct {
	mock *MockLoanApprovalService
}

// NewMockLoanApprovalService creates a new mock instance.
func NewMockLoanApprovalService(ctrl *gomock.Controller) *MockLoanApprovalService {
	mock := &MockLoanApprovalService{ctrl: ctrl}
	mock.recorder = &MockLoanApprovalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanApprovalService) EXPECT() *MockLoanApprovalServiceMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockLoanApprovalService) Save(loanApproval model.LoanApproval) (model.LoanApproval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", loanApproval)
	ret0, _ := ret[0].(model.LoanApproval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockLoanApprovalServiceMockRecorder) Save(loanApproval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLoanApprovalService)(nil).Save), loanApproval)
}
